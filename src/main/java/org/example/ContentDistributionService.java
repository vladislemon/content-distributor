package org.example;

import lombok.Value;

import java.time.Instant;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

/**
 * Интерфейс описывает контракт упрощенной системы дистрибуции контента для тестового задания.
 * <p>
 * Контент - это набор бинарных файлов (в дальнейшем мы будем называть эти файлы бандлами), который можно загрузить в систему и
 * сделать видимой конечным пользователям. У каждого бандла есть идентификатор BundleId.
 * <p>
 * У системы три категории пользователей: внутренние - те, кто управляют контентом (их методы начинаются с префикса "inner") и
 * внешние - те, кто его потребляет(префикс "public"), и разработчики, которые тестируют эту систему (используют все методы,
 * включая методы с префиксом admin)
 * <p>
 * Бандлов с одним и тем же идентификатором в системе может быть много, но только один бандл для каждого BundleId будет
 * отправляться пользователям в методе publicGetBundleUrls. Такой бандл мы будем называть АКТУАЛЬНЫМ.
 * <p>
 * Для управления актуальностью конкретных бандлов используется понятие "списка на публикацию" (СНП). СНП имеет идентификатор и
 * каждый загружаемый бандл может принадлежать только одному СНП, в одном СНП не может быть больше одного бандла с одинаковым
 * BundleId.
 * <p>
 * СНП может быть "опубликованным" и "неопубликованным". При создании СНП указывается дата публикации, после которой СНП
 * становится опубликованным, до этого момента СНП считается неопубликованным.
 * <p>
 * Актуальность бандла с конкретным BundleId определяется следующим образом:
 * <p>
 * - Если в системе нет ни одного опубликованного СНП в котором бы содержался BundleId, то актуального бандла с таким BundleId
 * нет.
 * <p>
 * - Если в системе есть ровно один опубликованный СНП в котором содержится BundleId, то именно бандл из этого СНП становится
 * актуальным
 * <p>
 * - Если в системе более одного опубликованного СНП в которых содержатся BundleId, то актуальным будет тот, дата публикации
 * для СНП которого позже, чем остальных.
 * <p>
 * Пример последовательных запросов и ответов на псевдокоде:
 * <p>
 * innerCreatePublishList("PL-1", Instant(10:00 1 января 2021 года))->PublishListId("1")
 * <p>
 * innerCreatePublishList("PL-1", Instant(10:00 1 января 2022 года))->ошибка
 * <p>
 * innerCreatePublishList("PL-2", Instant(11:00 1 января 2021 года))->PublishListId("2")
 * <p>
 * innerUploadContent(PublishListId("1"), BundleId("A","0"), byte[1])->true
 * <p>
 * innerUploadContent(PublishListId("1"), BundleId("A","0"), byte[2])->false
 * <p>
 * innerUploadContent(PublishListId("1"), BundleId("A","1"), byte[3])->true
 * <p>
 * innerUploadContent(PublishListId("2"), BundleId("A","0"), byte[4])->true
 * <p>
 * adminSetNow(Instant(09:59 1 января 2021 года))
 * <p>
 * publicGetBundleUrls(Set.of(BundleId("A","0")))->BundleUrlsDto(urls4Bundles={})
 * <p>
 * adminSetNow(Instant(10:01 1 января 2021 года))
 * <p>
 * publicGetBundleUrls(Set.of(BundleId("A","0"),BundleId("A","1")))->BundleUrlsDto(urls4Bundles={BundleId("A","0")
 * :url->byte[1],BundleId("A","1"):url->byte[3]})
 * <p>
 * adminSetNow(Instant(11:01 1 января 2021 года))
 * <p>
 * publicGetBundleUrls(Set.of(BundleId("A","0"),BundleId("A","1")))->BundleUrlsDto(urls4Bundles={BundleId("A","0")
 * :url->byte[4],BundleId("A","1"):url->byte[3]})
 * <p>
 * ВАЖНО: если вы считаете правильным добавить еще методы к данному интерфейсу, пожалуйста не добавляйте их сюда,
 * сделайте отдельный интерфейс ContentDistributionServiceAdditional.
 */
public interface ContentDistributionService {
    /**
     * Основной метод для внешних потребителей: получение урлов АКТУАЛЬНЫХ бандлов с заданными BundleId.
     * Нагрузка на этот метод и урлы, которые возвращаются в качестве ответа, может быть значительной, это требуется учитывать
     * как при написании кода, так и при выборе систем хранения данных.
     *
     * @param bundleIds список идентификаторов бандлов.
     * @return класс, содержаший маппинг идентификаторов на урлы, которые можно использовать для получения бинарной информации
     * бандлов
     */
    BundleUrlsDto publicGetBundleUrls(Set<BundleId> bundleIds);


    /**
     * Метод для создания СНП. При создании СНП с именем которое уже существует - ошибка
     *
     * @param name        название СНП
     * @param publishDate дата публикации СНП
     * @return идентификатор СНП
     */
    PublishListId innerCreatePublishList(String name, Instant publishDate);

    /**
     * Метод для загрузки в систему отдельных бандлов. При загрузке бандла с одинаковым bundleId в один и тот же СНП - ошибка
     *
     * @param publishListId  идентификатор СНП, которому будет принадлежать бандл
     * @param bundleId       идентификатор бандла
     * @param bundleContents бинарная информация бандла, ее нужно сохранить и иметь возможность сформировать ссылку для ее
     *                       получения
     * @return true, если всё добавилось, false если добавление не удалось
     */
    boolean innerUploadContent(PublishListId publishListId, BundleId bundleId, byte[] bundleContents);


    /**
     * Задать текущее время системы, для проверки актуальности бандлов на разные даты
     *
     * @param newNow если isEmpty, то выставляет текущее время системы по реальному, если isPresent, то выставляет время
     *               системы в соответствии с присланным значением
     */
    void adminSetNow(Optional<Instant> newNow);

    /**
     * Идентификатор бандла состоит из двух полей. Их семантика не важна для выполнения тестового задания.
     */
    @Value
    class BundleId {
        String field1;
        String field2;
    }

    /**
     * Идентификатор СНП
     */
    @Value
    class PublishListId {
        String id;
    }

    @Value
    class BundleUrlsDto {
        /**
         * Ключ - идентификатор бандла, значение - урл, по которому можно получить бинарную информацию для актуального бандла
         * соответствующего BundleId
         */
        Map<BundleId, String> urls4Bundles;
    }
}
